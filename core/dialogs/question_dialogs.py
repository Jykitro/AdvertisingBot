import operator

from aiogram import Bot
from aiogram_dialog import (
    Dialog, Window, LaunchMode, DialogManager,
)
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.markup.reply_keyboard import ReplyKeyboardFactory
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import ManagedRadio, Next, Radio, Column, RequestContact, Button, Cancel

from core.services.db_api.sqlite import update_user
from core.state.state import QuestionState
from aiogram.types import Message


# DEV t.me//ElonMuskSEO
async def que_date(**kwargs):
    age_list = [
        ("–ú–µ–Ω—å—à–µ 18 –ª–µ—Ç", '1'),
        ("18 - 25 –ª–µ—Ç", '2'),
        ("26 - 35 –ª–µ—Ç", '3'),
        ("36 - 45 –ª–µ—Ç", '4'),
        ("45+ –ª–µ—Ç", '5'),
    ]
    about_us = [
        ("–û—Ç –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö", '1'),
        ("–†–µ–∫–ª–∞–º–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", '2'),
        ("–†–µ–∫–ª–∞–º–∞ –Ω–∞ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–∏", '3')
    ]
    financial_goal = [
        ("–î–∞, —è –∏–º–µ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å.", "1"),
        ("–ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.", "2"),
        ("–Ø –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º.", "3"),

    ]
    take_time = [
        ("–ù–µ –±–æ–ª–µ–µ —á–∞—Å–∞ –≤ –¥–µ–Ω—å", "1"),
        ("–ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", "2"),
        ("–û–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "3"),
        ("–û–¥–∏–Ω —Ä–∞–∑ –≤ –º–µ—Å—è—Ü", "4"),

    ]
    partnership_participation = [
        ("–î–∞", "1"),
        ("–ù–µ—Ç", "2"),
        ("–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "3"),
    ]
    your_nationality = [
        ("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–æ—Å—Å–∏–∏", "1"),
        ("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "2"),
        ("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã", "3"),
    ]

    return {
        "age_list": age_list,
        'count': len(age_list),

        'About_us': about_us,
        "count_about": len(about_us),

        "Financial_goal": financial_goal,
        "count_financial_goal": len(financial_goal),

        "take_time": take_time,
        "count_take": len(take_time),

        "partnership_participation": partnership_participation,
        "count_participation": len(partnership_participation),

        "your_nationality": your_nationality,
        "count_nationality": len(your_nationality),
    }


async def name_handler(
        message: Message,
        widget: MessageInput,
        manager: DialogManager,
):
    manager.dialog_data["name"] = message.text
    await manager.next()


async def phone_handler(
        message: Message,
        widget: MessageInput,
        manager: DialogManager,
):
    manager.dialog_data["phone_number"] = message.contact.phone_number
    await manager.next()


async def get_user_data(dialog_manager: DialogManager, bot: Bot, **kwargs):
    radio_que1: ManagedRadio = dialog_manager.find("age")
    radio_que2: ManagedRadio = dialog_manager.find("about_us")
    radio_que3: ManagedRadio = dialog_manager.find("financial_goal")
    radio_que4: ManagedRadio = dialog_manager.find("take_time")
    radio_que5: ManagedRadio = dialog_manager.find("participation")
    radio_que6: ManagedRadio = dialog_manager.find("nationality")
    update_user(dialog_manager.event.from_user.id, radio_que1.get_checked(), radio_que2.get_checked(),
                radio_que3.get_checked(), radio_que4.get_checked(), radio_que5.get_checked(), radio_que6.get_checked(),
                dialog_manager.dialog_data.get("name"), dialog_manager.dialog_data.get("phone_number"), )
    await bot.send_message(chat_id="-1002145855934", text="Lead Info\n\n"
                                                          f"Name: {dialog_manager.dialog_data.get('name')}\n"
                                                          f"Phone Number: {dialog_manager.dialog_data.get('phone_number')}\n"
                                                          f"TG Username: @{dialog_manager.event.from_user.username}\n"
                                                          f"Que 1: {radio_que1.get_checked()}\n"
                                                          f"Que 2: {radio_que2.get_checked()}\n"
                                                          f"Que 3: {radio_que3.get_checked()}\n"
                                                          f"Que 4: {radio_que4.get_checked()}\n"
                                                          f"Que 5: {radio_que5.get_checked()}\n"
                                                          f"Que 6: {radio_que6.get_checked()}\n"
                           )
    return {
        "name": dialog_manager.dialog_data.get("name"),
    }


async def handler(dialog_manager: DialogManager, message: Message):
    # my actions
    await message.answer("sps")
    await dialog_manager.done()


question_dialogs = Dialog(
    #   1
    Window(
        Const(
            "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        ),
        Column(
            Radio(
                Format("üîò {item[0]}"),  # E.g `üîò Apple`
                Format("‚ö™Ô∏è {item[0]}"),
                id="age",
                item_id_getter=operator.itemgetter(1),
                items="age_list",
                on_click=Next()
            )
        ),
        state=QuestionState.age,
        getter=que_date,

    ),

    # 2
    Window(
        Const("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"),
        Column(
            Radio(
                Format("üîò {item[0]}"),
                Format("‚ö™Ô∏è {item[0]}"),
                id="about_us",
                item_id_getter=operator.itemgetter(1),
                items="About_us",
                on_click=Next()
            ),
        ),
        state=QuestionState.how_did_you_hear_about_us,
        getter=que_date,
    ),
    # 3
    Window(
        Const(
            "–ö–∞–∫–æ–≤—ã –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏, –∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∏—Ö –¥–æ—Å—Ç–∏—á—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º?",
        ),
        Column(
            Radio(
                Format("üîò {item[0]}"),  # E.g `üîò Apple`
                Format("‚ö™Ô∏è {item[0]}"),
                id="financial_goal",
                item_id_getter=operator.itemgetter(1),
                items="Financial_goal",
                on_click=Next()
            )
        ),
        state=QuestionState.financial_goal,
        getter=que_date,

    ),
    # 4
    Window(
        Const(
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ —Å–≤–æ–µ–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ?",
        ),
        Column(
            Radio(
                Format("üîò {item[0]}"),
                Format("‚ö™Ô∏è {item[0]}"),
                id="take_time",
                item_id_getter=operator.itemgetter(1),
                items="take_time",
                on_click=Next()
            )
        ),
        state=QuestionState.take_time,
        getter=que_date,

    ),
    Window(
        Const(
            "–ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ <b>¬´–ù–û–†–ù–ò–ö–ï–õ–¨¬ª</b> –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–º "
            "—á–µ–ª–æ–≤–µ–∫–æ–º –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥?"),
        Column(
            Radio(
                Format("üîò {item[0]}"),
                Format("‚ö™Ô∏è {item[0]}"),
                id="participation",
                item_id_getter=operator.itemgetter(1),
                items="partnership_participation",
                on_click=Next()
            ),
        ),

        state=QuestionState.partnership_participation,
        getter=que_date,
    ),
    Window(
        Const("–ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?"),
        Column(
            Radio(
                Format("üîò {item[0]}"),
                Format("‚ö™Ô∏è {item[0]}"),
                id="nationality",
                item_id_getter=operator.itemgetter(1),
                items="your_nationality",
                on_click=Next()
            ),
        ),
        state=QuestionState.your_nationality,
        getter=que_date,
    ),
    # Input Name
    Window(
        Const(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞–º —Å—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ <b>¬´–ù–û–†–ù–ò–ö–ï–õ–¨¬ª</b>! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, "
            "–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏:\n"),
        Const("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û"),
        MessageInput(name_handler),
        state=QuestionState.name,
        preview_add_transitions=[Next()]
    ),
    # Input phone
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç"),
        RequestContact(Const("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")),
        MessageInput(phone_handler),
        markup_factory=ReplyKeyboardFactory(
            input_field_placeholder=Format("{event.from_user.username}"),
            resize_keyboard=True,
        ),
        state=QuestionState.phone_number,
        preview_add_transitions=[Next()]
    ),
    Window(
        Format("<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</b> {name}, –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ <b>¬´–ù–æ—Ä–Ω–∏–∫–µ–ª—å –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏¬ª</b>"
              "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏.\n"),
        Button(
            text=Const("–•–æ—Ä–æ—à–æ"),
            id="confirm", on_click=Cancel()),
        state=QuestionState.confirm,
        getter=get_user_data,
        preview_add_transitions=[Cancel()]
    ),

)
